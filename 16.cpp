/*野指针
    1.什么是野指针？
    指针变量指向非法的内存空间
    2.非法的内存空间有哪些？
    a.未初始化的指针：声明了一个指针变量，但是没有给它赋一个有效的内存空间
    b.已释放的内存空间：指向的内存空间已经被释放，之后继续使用这个指针就可能导致未定义的行为，包括程序崩溃或者数据损坏
    c.悬挂指针：指向的内存对象已经被销毁，但指针仍然“悬挂”在那里，没有被重新分配或者置为NULL
    d.非法内存区域：指针可能被错误地设置为一个永远不该访问的地址，比如指向操作系统保留的内存区域
    3.其他说明
    使用野指针是非常危险的，因为它可能导致程序不稳定，出现难以预料的行为，甚至是安全漏洞。
    为了避免野指针问题，我们应当遵循一些最佳实践，比如始终初始化指针变量、在释放内存后立即将指针置为NULL、
    使用智能指针等现代语言提供的自动资源管理特性。
*/

#include <iostream>


int main(int argc, char** argv)
{
    // 指针变量p指向内存地址编号为0x1100的空间
    int *p = (int*)0x1100;

    // 访问野指针将会报错(出现段错误)
    std::cout << "*p = " << *p << std::endl;

    // 为什么说p是野指针？
    // 因为内存空间0x1100没有定义。

    return 0;
}